#!/bin/bash
#
# lib/neutron_ml2_mlnx
# Functions to control the configuration and operation of the neutron ml2 mlnx service
# <do not include this template file in ``stack.sh``!>

# Dependencies:
#
# - ``functions`` file
# - ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# - <list other global vars that are assumed to be defined>

# ``stack.sh`` calls the entry points in this order:
#
# - is_neutron_ml2_mlnx_enabled
# - install_neutron_ml2_mlnx
# - configure_neutron_ml2_mlnx
# - init_neutron_ml2_mlnx
# - start_neutron_ml2_mlnx
# - stop_neutron_ml2_mlnx
# - cleanup_neutron_ml2_mlnx

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# <define global variables here that belong to this project>

# Set up default directories
MLNX_AGENT_BINARY="$NEUTRON_BIN_DIR/neutron-mlnx-agent"

source ${TOP_DIR}/lib/neutron
source ${DEST}/neutron_ml2_mlnx/devstack/lib/eswitchd

# Entry Points
# ------------

# cleanup_neutron_ml2_mlnx() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_neutron_ml2_mlnx {
    # kill instances (nova)
    # delete image files (glance)
    # This function intentionally left blank
    :
}

# configure_neutron_ml2_mlnx() - Set config files, create data dirs, etc
function configure_neutron_ml2_mlnx {
    if is_service_enabled mlnx-agt; then
        if [[ -z "$PHYSICAL_INTERFACE_MAPPINGS" ]] && [[ -n "$PHYSICAL_NETWORK" ]] && [[ -n "$PHYSICAL_INTERFACE" ]]; then
            PHYSICAL_INTERFACE_MAPPINGS=$PHYSICAL_NETWORK:$PHYSICAL_INTERFACE
        fi
        if [[ -n "$PHYSICAL_INTERFACE_MAPPINGS" ]]; then
            iniset /$Q_PLUGIN_CONF_FILE eswitch physical_interface_mappings $PHYSICAL_INTERFACE_MAPPINGS
            iniset /$Q_PLUGIN_CONF_FILE sdn bind_normal_ports_physnets $PHYSICAL_NETWORK
            iniset /$Q_PLUGIN_CONF_FILE sdn bind_normal_ports True
            iniset /$Q_PLUGIN_CONF_FILE sdn sync_enabled False
        fi
        iniset /$Q_PLUGIN_CONF_FILE securitygroup noop
    fi
    if is_service_enabled eswitchd; then
        configure_eswitchd
    fi
    if is_service_enabled q-dhcp; then
        iniset /$Q_DHCP_CONF_FILE DEFAULT dhcp_broadcast_reply True
        iniset /$Q_DHCP_CONF_FILE DEFAULT interface_driver multi
        iniset /$Q_DHCP_CONF_FILE DEFAULT multi_interface_driver_mappings $PHYSICAL_NETWORK:ipoib
        iniset /$Q_DHCP_CONF_FILE DEFAULT ipoib_physical_interface $PHYSICAL_INTERFACE

    fi
    if is_service_enabled q-l3; then
       iniset /$Q_L3_CONF_FILE DEFAULT interface_driver multi
       iniset /$Q_L3_CONF_FILE DEFAULT multi_interface_driver_mappings $PHYSICAL_NETWORK:ipoib
       iniset /$Q_L3_CONF_FILE DEFAULT ipoib_physical_interface $PHYSICAL_INTERFACE
    fi

}

# init_neutron_ml2_mlnx() - Initialize databases, etc.
function init_neutron_ml2_mlnx {
    # clean up from previous (possibly aborted) runs
    # create required data files
    :
}

# install_neutron_ml2_mlnx() - Collect source and prepare
function install_neutron_ml2_mlnx {
    setup_develop $DEST/neutron_ml2_mlnx
}

# start_neutron_ml2_mlnx() - Start running processes, including screen
function start_neutron_ml2_mlnx {
    # The quoted command must be a single command and not include an
    # shell metacharacters, redirections or shell builtins.
    if is_service_enabled eswitchd; then
        start_eswitchd
    fi
    if is_service_enabled mlnx-agt; then
        run_process mlnx-agt "$MLNX_AGENT_BINARY --config-file ${NEUTRON_CONF} --config-file ${NEUTRON_CORE_PLUGIN_CONF}"
    fi
    sleep 10
}

# stop_neutron_ml2_mlnx() - Stop running processes (non-screen)
function stop_neutron_ml2_mlnx {
    if is_service_enabled eswitchd; then
        stop_eswitchd
        cleanup_eswitch
    fi
    if is_service_enabled mlnx-agt; then
        stop_process mlnx-agt
    fi
}

# Restore xtrace
$XTRACE

# Tell emacs to use shell-script-mode
## Local variables:
## mode: shell-script
## End:
